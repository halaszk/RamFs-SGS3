#!/sbin/busybox sh
export PATH="/res/customconfig/actions/push-actions:${PATH}";

if [ "a$2" == "a" ]; then
	echo "$debug_to_sd";
else
	debug_to_sd=$2;
	echo "$debug_to_sd";
fi;

DEBUG_FILE="/sdcard/halaszk_debug";
DEBUG_FILE_LOGCAT="/sdcard/halaszk_debug_logcat";
DEBUG_FILE_KMSG="/sdcard/halaszk_debug_kmsg";

case "${debug_to_sd}" in
	1)
		(
			SEPARATOR() {
				echo "" >> $DEBUG_FILE;
				echo " ---------------------------- " >> $DEBUG_FILE;
				echo "" >> $DEBUG_FILE;
			}
	
			# Kernel-Info
			echo "Kernel-Version:" > $DEBUG_FILE;
			cat /proc/version >> $DEBUG_FILE;
			SEPARATOR;

			date +"Last Reboot: %d.%m.%y / %H:%m" -d @$(( $(date +%s) - $(cut -f1 -d. /proc/uptime) )) >> $DEBUG_FILE;
			SEPARATOR;

			# System
			echo "ROM-Version:" >> $DEBUG_FILE;
			cat init.rc | grep "# THIS INIT.RC is FOR" >> $DEBUG_FILE;
			getprop ro.modversion >> $DEBUG_FILE;
			getprop cm.version >> $DEBUG_FILE;
			getprop ro.build.description >> $DEBUG_FILE;
			getprop ro.build.date >> $DEBUG_FILE;
			getprop ro.build.display.id >> $DEBUG_FILE;
			getprop ro.build.id >> $DEBUG_FILE;
			SEPARATOR;

			# Profile
			PROFILE=`cat /data/.siyah/.active.profile`;
			echo "Profile-Config: $PROFILE" >> $DEBUG_FILE;
			cat /data/.siyah/$PROFILE.profile >> $DEBUG_FILE;
			SEPARATOR;

			# Memory
			echo "Memory-Info:" >> $DEBUG_FILE;
			free >> $DEBUG_FILE;
			cat /proc/swaps >> $DEBUG_FILE;
			cat /proc/meminfo >> $DEBUG_FILE;
			SEPARATOR;

			# CPU
			echo "CPU-Info:" >> $DEBUG_FILE;
			scaling_governor=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
			echo "CPU-Governor: $scaling_governor" >> $DEBUG_FILE;
			cpuinfo_cur_freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq);
			echo "Cur.-Freq: $cpuinfo_cur_freq" >> $DEBUG_FILE;
			scaling_max_freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq);
			echo "Max.-Freq: $scaling_max_freq" >> $DEBUG_FILE;
			scaling_min_freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq);
			echo "Min.-Freq: $scaling_min_freq" >> $DEBUG_FILE;
			total_trans=$(cat /sys/devices/system/cpu/cpu0/cpufreq/stats/total_trans);
			echo "Total freq-switch: $total_trans" >> $DEBUG_FILE;
			echo "" >> $DEBUG_FILE;
			echo "Time-In-State:" >> $DEBUG_FILE;
			cat /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state >> $DEBUG_FILE;
			for i in `cat /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state | cut -f 2 -d ' '`; do 
				summe=$(($summe+$i)); 
			done; 
			summe=$(($summe/100)); 
			summe=$(($summe/60)); 
			if [ $summe -lt 60 ]; then
				echo "uptime with CPU on: $summe min" >> $DEBUG_FILE;
			else
				summe=$(($summe/60)); 
				echo "uptime with CPU on: $summe h" >> $DEBUG_FILE;
			fi;
			echo "" >> $DEBUG_FILE;
			echo "Uptime:" >> $DEBUG_FILE;
			uptime >> $DEBUG_FILE;
			SEPARATOR;

			echo "more CPU-Infos:" >> $DEBUG_FILE;	
			cpuinfo_cur_freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freq);
			for i in `ls /sys/devices/system/cpu/cpu0/cpufreq/`; do
				if [ ! -d "/sys/devices/system/cpu/cpu0/cpufreq/${i}" ]; then
					echo $i >> $DEBUG_FILE;
					cat /sys/devices/system/cpu/cpu0/cpufreq/$i >> $DEBUG_FILE 2>&1;
					echo "" >> $DEBUG_FILE;
				fi;
			done;
			SEPARATOR;

			# NET
			echo "NET-Info:" >> $DEBUG_FILE;
			ifconfig pdp0 >> $DEBUG_FILE;
			ifconfig wlan0 >> $DEBUG_FILE;

			# USB
			echo "USB-Info:" >> $DEBUG_FILE;
			lsusb >> $DEBUG_FILE;
			SEPARATOR;

			# lsmod
			echo "lsmod-Info:" >> $DEBUG_FILE;
			lsmod >> $DEBUG_FILE;
			SEPARATOR;

			# Partitions 
			echo "Partitions-Info:" >> $DEBUG_FILE;
			mount >> $DEBUG_FILE;
			cat /proc/partitions >> $DEBUG_FILE;
			SEPARATOR;

			# System
			echo "System-Info:" >> $DEBUG_FILE;
			echo "sysctl:" >> $DEBUG_FILE;
			sysctl -a >> $DEBUG_FILE;
			echo "" >> $DEBUG_FILE;
			echo "getprop:" >> $DEBUG_FILE;
			getprop >> $DEBUG_FILE;
			SEPARATOR;

			# Processes
			echo "Process-Info:" >> $DEBUG_FILE;
			top -b -n 1 >> $DEBUG_FILE;
			ps -wTl >> $DEBUG_FILE;
			SEPARATOR;

			# dmesg
			echo "dmesg-Info:" >> $DEBUG_FILE;
			dmesg >> $DEBUG_FILE;
			SEPARATOR;
		)&
		echo "All Data collected and ready at $DEBUG_FILE";
	;;
	2)
		# logcat
		(
			logcat -f $DEBUG_FILE_LOGCAT;
			wait 60;
			pkill logcat;
			#maybe we can also grep / remove personal infos here (e.g . email address)
		)&
		echo "Collecting logs for 60Sec please wait";
	;;	
3)
                # last_kmsg
                (
                        echo "last_kmsg-Info:" >> $DEBUG_FILE_KMSG;
                        cat /proc/last_kmsg >> $DEBUG_FILE_KMSG;
                        SEPARATOR;
                )&
                echo "Collecting last kmsg done";
        ;;

	*)
		echo "need input";
	;;
esac;

